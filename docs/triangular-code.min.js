/**
 * @license
 * https://github.com/lizongying/triangular-code
 */
class TriangularCode{constructor(t,e=200,s="green",i="white",o=""){this.container=t;this.scale=Math.sin(this.degreesToRadians(60));this._svgNamespace="http://www.w3.org/2000/svg";this.color=s;this.colorBackground=i;this.text=o;this.updateSize(e)}updateSize(t){this.size=t;const e=this.container;let s=e.querySelector("svg");if(s){while(s.firstChild){s.removeChild(s.firstChild)}}else{s=document.createElementNS(this._svgNamespace,"svg");s.setAttribute("transform",`scale(1,${this.scale})`);e.appendChild(s)}s.setAttribute("width",`${t}`);s.setAttribute("height",`${t}`);s.setAttribute("viewBox",`0 0 ${t} ${t}`);this._svg=s;this.encode()}updateText(t){this.text=t;const e=this.container;let s=e.querySelector("svg");if(s){while(s.firstChild){s.removeChild(s.firstChild)}}else{s=document.createElementNS(this._svgNamespace,"svg");s.setAttribute("transform",`scale(1,${this.scale})`);e.appendChild(s)}this._svg=s;this.encode()}degreesToRadians(t){return t*(Math.PI/180)}stringToBinary(t){const e=new TextEncoder;const s=e.encode(t);return Array.from(s).flatMap((t=>t.toString(2).padStart(8,"0").split(""))).map(Number)}encode(t=this.text){this.text=t;const e=this.color;const s=this.colorBackground;let i=this.stringToBinary(t);console.log("data",i);const o=5;const l=2;const n=new ReedSolomon(o,l);const c=n.encode(i);console.log("Encoded Data:",c);const r=c.slice(0,-2).concat([0,0]);const a=new ReedSolomon(o,l);const h=a.decode(r);console.log("Decoded Data:",h);if(i.length<32){i=i.concat(new Array(32-i.length).fill(0))}let d=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0];if(i.length>32){d=d.concat([0])}d=d.concat(i);let g=[0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1];let u=d.length+25;let f=Math.ceil(Math.sqrt(u));let p=this.size/f;let m=0;let v=0;for(let t=0;t<f;t++){let i=2*t+1;if(t>f-6){i-=(5-(f-t))*2+1;let o=t-(f-5);let l=2*o+1;for(let i=0;i<l;i++){let l=this.size-5/2*p-o*p/2;let n=t*p;let c;let r;let a;if(i%2===0){c=[l+i*p/2,n];r=[l+i*p/2-p/2,n+p];a=[l+(i*p/2+p/2),n+p]}else{c=[l+i*p/2,n+p];r=[l+i*p/2-p/2,n];a=[l+(i*p/2+p/2),n]}const h=document.createElementNS(this._svgNamespace,"polygon");h.setAttribute("points",`${c.join(",")} ${r.join(",")} ${a.join(",")}`);if(v<g.length&&g[v]===1){h.setAttribute("fill",e)}else{h.setAttribute("fill",s)}this._svg.appendChild(h);v++}}for(let o=0;o<i;o++){let i=this.size/2-t*p/2;let l=t*p;let n;let c;let r;if(o%2===0){n=[i+o*p/2,l];c=[i+o*p/2-p/2,l+p];r=[i+(o*p/2+p/2),l+p]}else{n=[i+o*p/2,l+p];c=[i+o*p/2-p/2,l];r=[i+(o*p/2+p/2),l]}const a=document.createElementNS(this._svgNamespace,"polygon");a.setAttribute("points",`${n.join(",")} ${c.join(",")} ${r.join(",")}`);if(m<d.length&&d[m]===1){a.setAttribute("fill",e)}else{a.setAttribute("fill",s)}this._svg.appendChild(a);m++}}}}